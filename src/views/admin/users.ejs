<% layout('../layout') %>

<h1>Manage Users</h1>

<div id="loading-message">Loading users...</div>
<div id="auth-error" style="display:none; color: red;">
  <p>Authentication required. Please <a href="/login">log in</a> as admin.</p>
</div>

<table class="user-table" style="display:none;">
  <thead>
    <tr>
      <th>Name</th>
      <th>Email</th>
      <th>Role</th>
      <th>Created</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody id="users-table-body">
    <!-- Users will be loaded here via JavaScript -->
  </tbody>
</table>

<script>
document.addEventListener('DOMContentLoaded', async function() {
  const token = localStorage.getItem('token');
  
  if (!token) {
    document.getElementById('loading-message').style.display = 'none';
    document.getElementById('auth-error').style.display = 'block';
    return;
  }
  
  try {
    // First check if user is admin
    const meResponse = await fetch('/api/auth/me', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const meData = await meResponse.json();
    
    if (!meResponse.ok || meData.data.user.role !== 'admin') {
      document.getElementById('loading-message').style.display = 'none';
      document.getElementById('auth-error').style.display = 'block';
      document.getElementById('auth-error').innerHTML = 
        '<p>You must be an admin to access this page. <a href="/items">Go back to items</a></p>';
      return;
    }
    
    // If user is admin, fetch users
    const usersResponse = await fetch('/admin/api/users', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!usersResponse.ok) {
      throw new Error('Failed to fetch users');
    }
    
    const usersData = await usersResponse.json();
    const users = usersData.data.users;
    
    // Hide loading, show table
    document.getElementById('loading-message').style.display = 'none';
    document.querySelector('.user-table').style.display = 'table';
    
    // Populate table
    const tableBody = document.getElementById('users-table-body');
    tableBody.innerHTML = '';
    
    users.forEach(user => {
      const row = document.createElement('tr');
      
      const createdDate = new Date(user.createdAt).toLocaleDateString();
      
      row.innerHTML = `
        <td>${user.name}</td>
        <td>${user.email}</td>
        <td><span class="role-badge role-${user.role}">${user.role}</span></td>
        <td>${createdDate}</td>
        <td>
          <a href="/admin/users/${user._id}" class="btn btn-sm">Edit</a>
          <button class="btn btn-sm btn-danger delete-user" data-id="${user._id}">Delete</button>
        </td>
      `;
      
      tableBody.appendChild(row);
    });
    
    // Add event listeners for delete buttons
    document.querySelectorAll('.delete-user').forEach(btn => {
      btn.addEventListener('click', async function() {
        if (confirm('Are you sure you want to delete this user?')) {
          const userId = this.getAttribute('data-id');
          
          try {
            const response = await fetch(`/admin/api/users/${userId}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            if (response.status === 204) {
              this.closest('tr').remove();
            } else {
              const data = await response.json();
              alert(data.message || 'Error deleting user');
            }
          } catch (err) {
            alert('An error occurred');
            console.error(err);
          }
        }
      });
    });
    
  } catch (err) {
    console.error('Error:', err);
    document.getElementById('loading-message').style.display = 'none';
    document.getElementById('auth-error').style.display = 'block';
    document.getElementById('auth-error').textContent = 'Error loading users: ' + err.message;
  }
});
</script>

<style>
.user-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.user-table th, .user-table td {
  padding: 10px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.user-table th {
  background-color: #f2f2f2;
}

.role-badge {
  display: inline-block;
  padding: 3px 8px;
  border-radius: 3px;
  font-size: 0.8em;
  color: white;
}

.role-admin {
  background-color: #e74c3c;
}

.role-user {
  background-color: #2ecc71;
}

.btn {
  padding: 5px 10px;
  border-radius: 3px;
  text-decoration: none;
  display: inline-block;
  margin-right: 5px;
  cursor: pointer;
  border: none;
  font-size: 0.9em;
}

.btn-danger {
  background-color: #e74c3c;
  color: white;
}

.btn-sm {
  padding: 3px 8px;
  font-size: 0.8em;
}
</style>